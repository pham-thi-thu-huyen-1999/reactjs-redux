{"version":3,"sources":["components/TaskForm.js","actions/index.js","constants/actionTypes.js","components/search.js","components/sort.js","components/searchAndSort.js","components/TaskItem.js","components/TaskList.js","App.js","serviceWorker.js","reducers/tasks.js","reducers/isDisplayForm.js","reducers/taskEditing.js","reducers/filterTable.js","reducers/searchName.js","reducers/sortList.js","reducers/index.js","index.js"],"names":["TaskForm","onChange","event","target","name","value","setState","onSave","preventDefault","props","onSaveTask","state","onClear","id","status","nextProps","taskEditing","this","isDisPlayForm","className","aria-hidden","onSubmit","type","required","onClick","React","Component","connect","dispatch","task","actions","Search","onHandleChange","keyword","onSearch","placeholder","Sort","sortBy","sortValue","onSort","by","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","role","sort","SearchAndSort","TaskItem","onUpdateStatus","onDelete","onEditTask","onOpenForm","index","tasks","TaskList","checked","filter","filterName","toLowerCase","filterStatus","onFilterTable","filterTable","indexOf","a","b","elm","map","key","search","App","addItem","Boolean","window","location","hostname","match","data","JSON","parse","localStorage","getItem","s4","Math","floor","random","toString","substring","generateID","findIndex","result","forEach","initialState","myReducer","action","push","setItem","stringify","splice","console","log","idStatus","cloneTask","parseInt","combineReducers","Store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e18ac320.chunk.js","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport * as actions from \"./../actions/index\";\n\nclass TaskForm extends React.Component{\n\n    // componentWillMount(){\n    //     if(this.props.taskEditing && this.props.taskEditing.id !== null){\n    //         this.setState({\n    //             id: this.props.taskEditing.id,\n    //             name: this.props.taskEditing.name,\n    //             status: this.props.taskEditing.status\n    //         })\n    //     }\n    //     else{\n    //         this.onClear()\n    //     }\n    // }\n    // cap nhat va nhap lai cac props\n    componentWillReceiveProps(nextProps){\n        if(nextProps && nextProps.taskEditing){\n            this.setState({\n                id: nextProps.taskEditing.id,\n                name: nextProps.taskEditing.name,  \n                status: nextProps.taskEditing.status\n            })\n        }\n    }\n    onChange = (event) =>{\n        let target = event.target;\n        var name = target.name;\n        var value = target.value;\n        this.setState({\n            [name]:value\n        })\n    }\n    onSave = (event) =>{\n        event.preventDefault();\n        this.props.onSaveTask(this.state)\n        this.onClear();\n    }\n    onClear = () =>{\n        this.setState({\n            id: '',\n            name: '',\n            status: false\n        })\n    }\n    render(){\n        var {isDisPlayForm} = this.props\n\n        return(\n            <div>\n                {isDisPlayForm === false ? '' \n                :\n                    <div className=\"panel panel-warning\">\n                    <div className=\"panel-heading\">\n                        <h3 className=\"panel-title\">{this.state.id ? 'cap nhat cong viec' : 'them cong viec'}</h3>\n                        <span className=\"fa fa-times-circle text-right\" aria-hidden=\"true\"></span>\n                    </div>\n                    <div className=\"panel-body\">\n                        <form onSubmit={this.onSave}>\n                            <div className=\"form-group\">\n                                <label>Tên :</label>\n                                <input type=\"text\" \n                                className=\"form-control\"\n                                // name phai bang name cua state\n                                name='name'\n                                value={this.state.name}\n                                onChange={this.onChange}\n                                />\n                            </div>\n                            <label>Trạng Thái :</label>\n                            <select \n                                className=\"form-control\"  \n                                required=\"required\"\n                                name=\"status\"\n                                value={this.state.status}\n                                >\n                                <option value={true}>Kích Hoạt</option>\n                                <option value={false}>Ẩn</option>\n                            </select>\n                            <br/>\n                            <div className=\"text-center\">\n                                <button type=\"submit\" \n                                    className=\"btn btn-warning\"\n                                    >Luu</button>&nbsp;\n                                <button \n                                    type=\"button\" \n                                    className=\"btn btn-danger\"\n                                    onClick={this.onClear}\n                                    >Hủy Bỏ</button>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            }\n            </div>\n        )\n            \n    }\n    \n}\n\nconst mapStatetoProps = (state) => {\n    return {\n        isDisPlayForm: state.isDisPlayForm,\n        taskEditing: state.taskEditing\n    }\n}\n\nconst mapDispatchtoProps = (dispatch, props) =>{\n    return {\n        onSaveTask: (task) =>{\n            //action\n            dispatch(actions.saveTask(task))\n        }\n    }\n}\n\nexport default connect(mapStatetoProps, mapDispatchtoProps, null)(TaskForm); ","import * as types from \"./../constants/actionTypes\";\n\n/**\n * action require\n * reducer khai bao case: type\n * map lai cca state den props de truyen vao component\n */\n// show all list task\n/**\n * muon lay state len store lay\n * -- tao type\n * -- tao cac state\n * -- map lai cac state va truyen no ra ngoai props\n * -- tu props truyen ra lai component\n * -- hien thi ra view\n */\nconst listAll = () => {\n    return {\n        type: types.LIST_ALL\n    }\n}\n\nconst saveTask = (task) =>{\n    return {\n        type: types.SAVE_TASK,\n        task\n    }\n}\n\nconst openForm = () =>{\n    return {\n        type: types.OPEN_FORM,\n    }\n}\n\nconst closeForm = () =>{\n    return {\n        type: types.CLOSE_FORM\n    }\n}\n\nconst updateStatus = (id) =>{\n    return {\n        type: types.UPDATE_STATUS,\n        id\n    }\n}\n\nconst deleteTask = (id) =>{\n    return {\n        type: types.DELETE_TASK,\n        id\n    }\n}\n\nconst editTask = (task) => {\n    return {\n        type: types.EDIT_TASK,\n        task\n    }\n}\n\n//truyen vao mot object de filter cho ca 2\n\nconst filterTable = (filter) =>{\n    return {\n        type: types.FILTER_TABLE,\n        filter // filter: filterName, filterStatus\n\n    }\n}\nconst searchName = (keyword) =>{\n    return {\n        type: types.SEARCH_NAME,\n        keyword\n    }\n}\nconst enterName = (keyword) =>{\n    return {\n        type: types.ENTER_NAME,\n        keyword\n    }\n}\n\nconst sortList = (sort) =>{\n    return {\n        type: types.SORT,\n        sort\n    }\n}\n\nexport { listAll, saveTask, openForm, closeForm, updateStatus, deleteTask, editTask, filterTable, searchName, enterName, sortList }","const LIST_ALL = 'LIST_ALL';\nconst SAVE_TASK = 'SAVE_TASK'\nconst OPEN_FORM = 'OPEN_FORM';\nconst CLOSE_FORM = 'CLOSE_FORM'\nconst UPDATE_STATUS = 'UPDATE_STATUS'\nconst DELETE_TASK = 'DELETE_TASK';\nconst EDIT_TASK = 'EDIT_TASK';\nconst FILTER_TABLE = 'FILTER_TABLE';\nconst SEARCH_NAME = 'SEARCH_NAME';\nconst ENTER_NAME = 'ENTER_NAME';\nconst SORT = 'SORT';\n\nexport { LIST_ALL, SAVE_TASK, OPEN_FORM, CLOSE_FORM, UPDATE_STATUS, DELETE_TASK, EDIT_TASK, FILTER_TABLE, SEARCH_NAME, ENTER_NAME, SORT };","import React from 'react'\nimport { connect } from 'react-redux';\nimport * as actions from '../actions';\n\nclass Search extends React.Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            keyword: ''\n        }\n    }\n// su kien khi nhap vao\n// phai co target moi co the hien thi input\n// event.target de doc du lieu trong input sau do cap nhat lai state\n    onHandleChange = (event) =>{\n        this.setState({\n            keyword: event.target.value\n        })\n    }\n    onSearch = () =>{\n        // su dung prop de truyen state len reducer\n        this.props.onSearch(this.state.keyword)\n    }\n    render() {\n        return(\n            <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\n                <div className=\"input-group\">\n                    <input type=\"text\" \n                        className=\"form-control\" \n                        placeholder=\"Nhập từ khóa...\"\n                        name='keyword'\n                        value={this.state.keyword}\n                        onChange={this.onHandleChange}\n                        />\n                    <span className=\"input-group-btn\">\n                        <button \n                            className=\"btn btn-primary\" \n                            type=\"button\"\n                            onClick={this.onSearch}\n                            >\n                        <span className=\"fa fa-search mr-5\"></span>Tìm\n                    </button>\n                    </span>\n                </div>\n            </div>\n        )\n    }\n}\n// search theo name\n// get state from reducer\nvar mapStatetoProps = (state) =>{\n    return {}\n}\n\nconst mapDispatchtoProps = (dispatch, props) =>{\n    return {\n        onSearch : (keyword) =>{\n            dispatch(actions.searchName(keyword))\n        },\n        onHandleChange: (keyword) =>{\n            dispatch(actions.enterName(keyword))\n        }\n    }\n}\n\nexport default connect(mapStatetoProps, mapDispatchtoProps)(Search)","import React from 'react'\nimport { connect } from 'react-redux';\nimport * as actions from '../actions/index'\n\n\nclass Sort extends React.Component{\n\n    onClick = (sortBy, sortValue) =>{\n        \n        // ben trong day la mot object\n        this.props.onSort({\n            by: sortBy,\n            value: sortValue\n        })\n    }\n    render() {\n\n        // su dung sort dc chuyen tu state thanh prop de tryten ra gia tri\n        return(\n            <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\n                <div className=\"dropdown\">\n                    <button className=\"btn btn-primary dropdown-toggle\" type=\"button\" id=\"dropdownMenu1\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"true\">\n                        Sắp Xếp <span className=\"fa fa-caret-square-o-down ml-5\"></span>\n                    </button>\n                    <ul className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\n                        {/* su dung arow func de truyen tham so */}\n                        <li onClick={() =>{this.onClick('name', 1)}}>\n                            <a role=\"button\" \n                                className={this.props.sort.by === 'name' && this.props.sort.value === 1 \n                                ? 'sort_selected' : ''}\n                                >\n                                <span className=\"fa fa-sort-alpha-asc pr-5\">\n                                    Tên A-Z\n                                </span>\n                            </a>\n                        </li>\n                        <li onClick={() => this.onClick('name', -1)}>\n                            <a role=\"button\"\n                                className={this.props.sort.by === 'name' && this.props.sort.value === -1 \n                                ? 'sort_selected' : ''}\n                                >\n                                <span className=\"fa fa-sort-alpha-desc pr-5\">\n                                    Tên Z-A\n                                </span>\n                            </a>\n                        </li>\n                        <li role=\"separator\" className=\"divider\"></li>\n                        <li onClick={() =>{this.onClick('status', 1)}}>\n                            <a role=\"button\"\n                                className={this.props.sort.by === 'status' && this.props.sort.value === 1 \n                                ? 'sort_selected' : ''}\n                                >\n                                    Trạng Thái Kích Hoạt</a></li>\n                        <li onClick={() =>{this.onClick('status', -1)}}>\n                            <a role=\"button\"\n                            className={this.props.sort.by === 'status' && this.props.sort.value === 1 \n                            ? 'sort_selected' : ''}\n                        \n                        >Trạng Thái Ẩn</a></li>\n                    </ul>\n                </div>\n             </div>\n        )\n    }\n}\n\nconst mapStatetoProps = (state) =>{\n    // tao ra props dc map tu state chuyen thanh props ten...\n    // chuyen sort thanh props\n    return {\n        sort: state.sort\n    }\n}\n\nconst mapDispatchtoProp = (dispatch) =>{\n    return {\n        onSort: (sort) => {\n            dispatch(actions.sortList(sort))\n        }\n    }\n}\nexport default connect(mapStatetoProps, mapDispatchtoProp)(Sort);","import React from 'react'\nimport Search from './search'\nimport Sort from './sort'\n\nclass SearchAndSort extends React.Component{\n    render() {\n        return(\n            <div className=\"row mt-15\"> \n                <Search />\n                <Sort />\n            </div>\n        )\n    }\n}\n\nexport default SearchAndSort;\n","import React from 'react';\n\nimport * as actions from './../actions/index';\nimport { connect } from 'react-redux';\n\nclass TaskItem extends React.Component{\n    onUpdateStatus = () =>{\n        //truyen id ccua taskItem vao tasklist\n        this.props.onUpdateStatus(this.props.task.id);\n    }\n    onDelete = () =>{\n        this.props.onDelete(this.props.task.id);\n    }\n    onEditTask = () =>{\n        // this.prop.task: task, truyen qua reducer de goi lai\n        this.props.onOpenForm();\n        this.props.onEditTask(this.props.task);\n    }\n    \n    render(){\n\n        return(\n            <tr>\n                <td>{this.props.index}</td>\n                <td>{this.props.task.name}</td>\n                <td className=\"text-center\">\n                    <span \n                        onClick={this.onUpdateStatus}\n                        className={this.props.task.status === true ? 'label label-success' : 'label label-danger'}>\n                        {this.props.task.status === true ? 'kich hoat' : 'an'}\n                    </span>\n                </td>\n                <td className=\"text-center\">\n                    {/* click vao sua phai mo form */}\n                    <button type=\"button\" \n                        className=\"btn btn-warning\"\n                        onClick={this.onEditTask}\n                        >\n                        <span className=\"fa fa-pencil mr-5\"></span>Sửa\n                    </button>\n                    &nbsp;\n                    <button type=\"button\" \n                        className=\"btn btn-danger\"\n                        onClick={this.onDelete}\n                        >\n                        <span className=\"fa fa-trash mr-5\"></span>Xóa\n                    </button>\n                </td>\n            </tr>\n        )\n    }\n}\n\nvar mapStatetoProps = (state) =>{\n    return {\n        tasks: state.tasks\n    }\n}\n\nconst mapDispatchtoProps = (dispatch, props) =>{\n    return {\n        onUpdateStatus: (id) =>{\n            dispatch(actions.updateStatus(id));\n        },\n        onDelete: (id) => {\n            dispatch(actions.deleteTask(id))\n        },\n        onOpenForm: () =>{\n            dispatch(actions.openForm());\n        },\n        // truyen vao task de edit\n        onEditTask: (task) => {\n            dispatch(actions.editTask(task))\n        }\n        \n    }\n}\n\nexport default connect(mapStatetoProps, mapDispatchtoProps)(TaskItem);\n\n// khoi tao them state de delete, updateTask","import React from 'react';\nimport TaskItem from './TaskItem';\nimport * as actions from './../actions/index';\n\nimport { connect } from \"react-redux\";\n\nclass TaskList extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            filterName: '',\n            filterStatus: -1\n        }\n\n    }\n\n    // loc data on table\n    onChange = (event) =>{\n        var target = event.target\n        var name = target.name;\n        var value = target.name === 'isGoing' ? target.checked : target.value\n        let filter = {\n            name: name === 'filterName' ? value : this.state.filterName.toLowerCase(),\n            status: name === 'filterStatus' ? value: this.state.filterStatus\n        }\n        // ** truyen filter sau khi gan cua tasklist truyen ra lai store\n        this.props.onFilterTable(filter)\n        this.setState({\n            [name] : value\n        })\n    }\n       \n    render(){\n        var {tasks, filterTable, keyword, sort} = this.props\n        /**\n         * filter\n         */\n        if(filterTable) {\n            if(filterTable.name){\n                tasks = tasks.filter((task) => {\n                    // return task.name\n                    return task.name.toLowerCase().indexOf(filterTable.name.toLowerCase()) !== -1;\n                })\n            }\n\n                tasks = tasks.filter((task) =>{\n                    if(filterTable.status === -1){\n                        return task;\n                    }\n                    else if(filterTable.status === 1){\n                        return task.status === true;\n                        // return task.status === (filter.status === 1 ? true : false)\n                    }\n                    else if(filterTable.status === 0){\n                        return task.status === false;\n                    }\n                })           \n        }\n        /**\n         * sort\n         */\n        if(sort.sortBy === 'name'){\n            tasks.sort((a, b) =>{\n                //A-Z\n                if(a.name > b.name) return sort.sortValue;\n                //Z-A\n                else if(a.name < b.name) return -sort.sortValue;\n                else return 0;\n            })\n        }\n        else{\n            tasks.sort((a, b) =>{\n                if(a.status > b.status) {\n                    return -sort.sortValue;\n                }\n                else if(a.status < b.status){\n                    return sort.sortValue;\n                }\n                else return 0;\n            })\n        }\n        /**\n         * search\n         */\n        tasks = tasks.filter((task) =>{\n            return task.name.toLowerCase().indexOf(keyword.toLowerCase()) !== -1;\n        })\n        var elm = tasks.map((task, index)=>{\n            return (\n                <TaskItem\n                    key={index}\n                    task={task}\n                    index={index}\n                />\n            )\n            \n        })\n\n        return(\n            <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n                <table className=\"table table-bordered table-hover\">\n                    <thead>\n                        <tr>\n                            <th className=\"text-center\">STT</th>\n                            <th className=\"text-center\">Tên</th>\n                            <th className=\"text-center\">Trạng Thái</th>\n                            <th className=\"text-center\">Hành Động</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td></td>\n                            <td>\n                                <input \n                                    type=\"text\" \n                                    className=\"form-control\"\n                                    name=\"filterName\"\n                                    onChange={this.onChange}\n                                    value={this.state.filterName}\n                                    \n                                    />\n                                    {/* value get from state */}\n                            </td>\n                            <td>\n                                <select \n                                    className=\"form-control\"\n                                    name='filterStatus'\n                                    onChange={this.onChange}\n                                    value={this.state.filterStatus}\n                                    \n                                    >\n                                    <option value=\"-1\">Tất Cả</option>\n                                    <option value=\"0\">Ẩn</option>\n                                    <option value=\"1\">Kích Hoạt</option>\n                                </select>\n                            </td>\n                            <td></td>\n                        </tr>\n                       {elm}\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n}\n\n// map lai state list va chuyen thanh cac props\nvar mapStoretoProps = (state) =>{\n    // state get tu index ma reducer combine\n    // state luu tru cac gia tri cua input\n    return {\n        tasks : state.tasks,\n        filterTable: state.filterTable,\n        keyword: state.search,\n        sort: state.sort\n    }\n}\n\nconst mapDispatchtoProps = (dispatch, props) =>{\n    return {\n        onFilterTable: (filter) =>{\n            dispatch(actions.filterTable(filter))\n        }\n    }\n}\n\n// state cua store chuyen thanh cac props\n\nexport default connect( mapStoretoProps,mapDispatchtoProps, null)(TaskList);\n\n//tai sao state get tu store rooi ma con phai khai bao lai","import React from 'react';\nimport TaskForm from './components/TaskForm';\nimport SearchAndSort from './components/searchAndSort';\nimport TaskList from './components/TaskList';\n\nimport * as actions from './actions/index';\n\nimport { connect } from 'react-redux'\n\nclass App extends React.Component{\n    //openform\n    addItem = () =>{\n        this.props.onOpenForm()\n    }\n    // neu showform === true thi hien thi form va muc them cong viec  la 8\n    render(){\n\n        // if(sortBy === 'name'){\n        //     tasks.sort((a, b) =>{\n        //         //A-Z\n        //         if(a.name > b.name) return sortValue;\n        //         //Z-A\n        //         else if(a.name < b.name) return -sortValue;\n        //         else return 0;\n        //     })\n        // }\n        // sort  status\n        // else{\n        //     tasks.sort((a, b) =>{\n        //         if(a.status > b.status) {\n        //             return -sortValue;\n        //         }\n        //         else if(a.status < b.status){\n        //             return sortValue;\n        //         }\n        //         else return 0;\n        //     })\n        // }\n        \n        // truyen prop de truyen du lieu tu form ra ngoai\n\n        return(\n            <div className=\"container\">\n                <div className=\"text-center\">\n                    <h1>Quản Lý Công Việc</h1>\n                    <hr/>\n                </div>\n                <div className='row'>\n                    <div className={this.props.isDisPlayForm === true ? 'col-xs-4 col-sm-4 col-md-4 col-lg-4' : ''}>\n                        <TaskForm/>\n                    </div>\n                    <div className={this.props.isDisPlayForm === true ? 'col-xs-8 col-sm-8 col-md-8 col-lg-8' : 'col-xs-12 col-sm-12 col-md-12 col-lg-12'}>\n                        <button type=\"button\" \n                            className=\"btn btn-primary\"\n                            onClick={this.addItem}\n                            >\n                        <span className=\"fa fa-plus mr-5\">Thêm Công Việc</span>\n                        </button>\n                      <hr/>\n                        <SearchAndSort />\n                        <hr></hr>\n                        <div className=\"row mt-15\">\n                            <TaskList />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStatetoProps = (state) =>{\n    return {\n        isDisPlayForm: state.isDisPlayForm\n    }\n}\n\nconst mapDispatchtoProps = (dispatch, props) => {\n    return {\n        onOpenForm : () =>{\n            dispatch(actions.openForm())\n        },\n    }\n}\n\nexport default connect(mapStatetoProps, mapDispatchtoProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as types from \"./../constants/actionTypes\";\n\nvar data = JSON.parse(localStorage.getItem('tasks'));\n    /**\n     * create unique id\n     */\nconst s4 = () => {\n    return Math.floor((1+Math.random()) * 0x10000).toString(16).substring(1);\n}\nconst generateID = () =>{\n    return s4() + s4() + '-' + s4();\n}\nvar findIndex = (tasks, id) =>{\n    var result = -1;\n    tasks.forEach((task, index) =>{\n        if(task.id === id){\n            // index == task chua id\n            result = index;\n        }\n    })\n    return result;\n}\nvar initialState = data ? data : [];\nvar myReducer = (state = initialState, action) =>{\n    switch(action.type){\n        case types.LIST_ALL:\n            return state\n        case types.SAVE_TASK:\n            var task ={\n                id: action.task.id,\n                name: action.task.name,\n                status: action.task.status === 'true' ? true : false\n            }\n            if(!task.id){\n                task.id = generateID();\n                state.push(task);\n            }else {\n                let index = findIndex(state, task.id)\n                state[index] = task\n            }\n            \n            localStorage.setItem('tasks', JSON.stringify(state))\n            //tasks: key == key local data\n            return [...state]\n        case types.DELETE_TASK:\n            var id = action.id\n            var index = findIndex(state, id);\n            if(index !== -1){\n                state.splice(index, 1)\n            }\n            localStorage.setItem('tasks', JSON.stringify(state))\n            return [...state]\n        case types.UPDATE_STATUS:\n            console.log(action)\n            var idStatus = action.id\n            var index = findIndex(state, idStatus);\n            var cloneTask = {...state[index]};\n            cloneTask.status = !cloneTask.status;\n            state[index] = cloneTask\n            // state[index] = {\n            //     ...state[index],\n            //     status: !state[index].status\n            // }\n\n            localStorage.setItem('tasks', JSON.stringify(state))\n            return [...state]\n        default: return state\n    }\n}\nexport default myReducer","import * as types from \"./../constants/actionTypes\";\n\nvar initialState = false;\nvar myReducer = (state = initialState, action) =>{\n    switch(action.type){\n        case types.OPEN_FORM:\n            return !state\n        default: return state\n    }\n}\nexport default myReducer","import * as types from \"./../constants/actionTypes\";\n\nvar initialState = {\n    id: '111',\n    name: '',\n    status: false\n    \n};\nvar myReducer = (state = initialState, action) =>{\n    switch(action.type){\n        case types.EDIT_TASK:\n            return action.task;\n        default: return state\n    }\n}\nexport default myReducer","import * as types from \"./../constants/actionTypes\";\n\nvar initialState = {\n    name: '',\n    status: -1\n};\nvar myReducer = (state = initialState, action) => {\n    switch(action.type){\n        case types.FILTER_TABLE:\n            return {\n                name: action.filter.name,\n                status: parseInt(action.filter.status, 10)\n            };\n        default: return state\n    }\n}\nexport default myReducer","import * as types from \"./../constants/actionTypes\";\n\nvar initialState = '';\nvar myReducer = (state = initialState, action) =>{\n    switch(action.type){\n        case types.SEARCH_NAME:\n            console.log(action)\n            return action.keyword\n        case types.ENTER_NAME:\n            console.log('action enter input', action)\n            return state\n        default: return state\n    }\n}\nexport default myReducer","import * as types from \"./../constants/actionTypes\";\n\nvar initialState = {\n    by: 'name',\n    value: 1\n};\nvar myReducer = (state = initialState, action) => {\n    switch(action.type){\n        case types.SORT:\n            // action dc lay tu state tren view\n            // cap nhat lai state tren reducer thanh voi action.... va gan vao state hien tai tren reducer\n            return {\n                by: action.sort.by,\n                value: action.sort.value\n            }\n            // action o day dc truyen ra ham map statetoprops va se dc su dung lai tren view voi key props\n        default: return state\n    }\n}\nexport default myReducer","import tasks from \"./tasks\";\nimport isDisPlayForm from './isDisplayForm';\nimport taskEditing from './taskEditing';\nimport filterTable from './filterTable';\nimport search from './searchName'\nimport sort from './sortList'\nimport { combineReducers } from \"redux\";\n\n\n// state get tu store\nconst myReducer = combineReducers({\n    tasks, // tasks: tasks\n    isDisPlayForm,\n    taskEditing,\n    filterTable,\n    search,\n    sort\n})\n\nexport default myReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore } from 'redux';\nimport myReducer from \"./reducers/index\";\nimport { Provider } from \"react-redux\";\n\nconst Store = createStore(\n    myReducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    \n    )\n\n\nReactDOM.render(\n    <Provider store={Store}>\n        <App />\n    </Provider>, \n    document.getElementById('root')\n    \n    );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}